type AnyFunction = (x:any) => any;
export interface Module{
  ok: string;
  oki: number;
  block: AnyFunction;
  if: AnyFunction;
  loop: AnyFunction;
  br: AnyFunction;
  break: AnyFunction;
  br_if: AnyFunction;
  // switch: AnyFunction;
  // call: AnyFunction;
  // call_indirect: AnyFunction;
  // callIndirect: AnyFunction;
  // return_call: AnyFunction;
  // returnCall: AnyFunction;
  // return_call_indirect: AnyFunction;
  // returnCallIndirect: AnyFunction;
  // local: { get: AnyFunction; set: AnyFunction; tee: AnyFunction };
  // global: { get: AnyFunction; set: AnyFunction };
  // table: {
  //   get: AnyFunction;
  //   set: AnyFunction;
  //   size: AnyFunction;
  //   grow: AnyFunction
  // };
  // memory: {
  //   size: AnyFunction;
  //   grow: AnyFunction;
  //   init: AnyFunction;
  //   copy: AnyFunction;
  //   fill: AnyFunction;
  //   atomic: {
  //     notify: AnyFunction;
  //     wait32: AnyFunction;
  //     wait64: AnyFunction
  //   }
  // };
  // data: { drop: AnyFunction };
  // i32: {
  //   load: AnyFunction;
  //   load8_s: AnyFunction;
  //   load8_u: AnyFunction;
  //   load16_s: AnyFunction;
  //   load16_u: AnyFunction;
  //   store: AnyFunction;
  //   store8: AnyFunction;
  //   store16: AnyFunction;
  //   const: AnyFunction;
  //   clz: AnyFunction;
  //   ctz: AnyFunction;
  //   popcnt: AnyFunction;
  //   eqz: AnyFunction;
  //   trunc_s: { f32: AnyFunction; f64: AnyFunction };
  //   trunc_u: { f32: AnyFunction; f64: AnyFunction };
  //   trunc_s_sat: { f32: AnyFunction; f64: AnyFunction };
  //   trunc_u_sat: { f32: AnyFunction; f64: AnyFunction };
  //   reinterpret: AnyFunction;
  //   extend8_s: AnyFunction;
  //   extend16_s: AnyFunction;
  //   wrap: AnyFunction;
  //   add: AnyFunction;
  //   sub: AnyFunction;
  //   mul: AnyFunction;
  //   div_s: AnyFunction;
  //   div_u: AnyFunction;
  //   rem_s: AnyFunction;
  //   rem_u: AnyFunction;
  //   and: AnyFunction;
  //   or: AnyFunction;
  //   xor: AnyFunction;
  //   shl: AnyFunction;
  //   shr_u: AnyFunction;
  //   shr_s: AnyFunction;
  //   rotl: AnyFunction;
  //   rotr: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt_s: AnyFunction;
  //   lt_u: AnyFunction;
  //   le_s: AnyFunction;
  //   le_u: AnyFunction;
  //   gt_s: AnyFunction;
  //   gt_u: AnyFunction;
  //   ge_s: AnyFunction;
  //   ge_u: AnyFunction;
  //   atomic: {
  //     load: AnyFunction;
  //     load8_u: AnyFunction;
  //     load16_u: AnyFunction;
  //     store: AnyFunction;
  //     store8: AnyFunction;
  //     store16: AnyFunction;
  //     rmw: {
  //       add: AnyFunction;
  //       sub: AnyFunction;
  //       and: AnyFunction;
  //       or: AnyFunction;
  //       xor: AnyFunction;
  //       xchg: AnyFunction;
  //       cmpxchg: AnyFunction
  //     };
  //     rmw8_u: {
  //       add: AnyFunction;
  //       sub: AnyFunction;
  //       and: AnyFunction;
  //       or: AnyFunction;
  //       xor: AnyFunction;
  //       xchg: AnyFunction;
  //       cmpxchg: AnyFunction
  //     };
  //     rmw16_u: {
  //       add: AnyFunction;
  //       sub: AnyFunction;
  //       and: AnyFunction;
  //       or: AnyFunction;
  //       xor: AnyFunction;
  //       xchg: AnyFunction;
  //       cmpxchg: AnyFunction
  //     }
  //   };
  //   pop: AnyFunction
  // };
  // i64: {
  //   load: AnyFunction;
  //   load8_s: AnyFunction;
  //   load8_u: AnyFunction;
  //   load16_s: AnyFunction;
  //   load16_u: AnyFunction;
  //   load32_s: AnyFunction;
  //   load32_u: AnyFunction;
  //   store: AnyFunction;
  //   store8: AnyFunction;
  //   store16: AnyFunction;
  //   store32: AnyFunction;
  //   const: AnyFunction;
  //   clz: AnyFunction;
  //   ctz: AnyFunction;
  //   popcnt: AnyFunction;
  //   eqz: AnyFunction;
  //   trunc_s: { f32: AnyFunction; f64: AnyFunction };
  //   trunc_u: { f32: AnyFunction; f64: AnyFunction };
  //   trunc_s_sat: { f32: AnyFunction; f64: AnyFunction };
  //   trunc_u_sat: { f32: AnyFunction; f64: AnyFunction };
  //   reinterpret: AnyFunction;
  //   extend8_s: AnyFunction;
  //   extend16_s: AnyFunction;
  //   extend32_s: AnyFunction;
  //   extend_s: AnyFunction;
  //   extend_u: AnyFunction;
  //   add: AnyFunction;
  //   sub: AnyFunction;
  //   mul: AnyFunction;
  //   div_s: AnyFunction;
  //   div_u: AnyFunction;
  //   rem_s: AnyFunction;
  //   rem_u: AnyFunction;
  //   and: AnyFunction;
  //   or: AnyFunction;
  //   xor: AnyFunction;
  //   shl: AnyFunction;
  //   shr_u: AnyFunction;
  //   shr_s: AnyFunction;
  //   rotl: AnyFunction;
  //   rotr: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt_s: AnyFunction;
  //   lt_u: AnyFunction;
  //   le_s: AnyFunction;
  //   le_u: AnyFunction;
  //   gt_s: AnyFunction;
  //   gt_u: AnyFunction;
  //   ge_s: AnyFunction;
  //   ge_u: AnyFunction;
  //   atomic: {
  //     load: AnyFunction;
  //     load8_u: AnyFunction;
  //     load16_u: AnyFunction;
  //     load32_u: AnyFunction;
  //     store: AnyFunction;
  //     store8: AnyFunction;
  //     store16: AnyFunction;
  //     store32: AnyFunction;
  //     rmw: {
  //       add: AnyFunction;
  //       sub: AnyFunction;
  //       and: AnyFunction;
  //       or: AnyFunction;
  //       xor: AnyFunction;
  //       xchg: AnyFunction;
  //       cmpxchg: AnyFunction
  //     };
  //     rmw8_u: {
  //       add: AnyFunction;
  //       sub: AnyFunction;
  //       and: AnyFunction;
  //       or: AnyFunction;
  //       xor: AnyFunction;
  //       xchg: AnyFunction;
  //       cmpxchg: AnyFunction
  //     };
  //     rmw16_u: {
  //       add: AnyFunction;
  //       sub: AnyFunction;
  //       and: AnyFunction;
  //       or: AnyFunction;
  //       xor: AnyFunction;
  //       xchg: AnyFunction;
  //       cmpxchg: AnyFunction
  //     };
  //     rmw32_u: {
  //       add: AnyFunction;
  //       sub: AnyFunction;
  //       and: AnyFunction;
  //       or: AnyFunction;
  //       xor: AnyFunction;
  //       xchg: AnyFunction;
  //       cmpxchg: AnyFunction
  //     }
  //   };
  //   pop: AnyFunction
  // };
  // f32: {
  //   load: AnyFunction;
  //   store: AnyFunction;
  //   const: AnyFunction;
  //   const_bits: AnyFunction;
  //   neg: AnyFunction;
  //   abs: AnyFunction;
  //   ceil: AnyFunction;
  //   floor: AnyFunction;
  //   trunc: AnyFunction;
  //   nearest: AnyFunction;
  //   sqrt: AnyFunction;
  //   reinterpret: AnyFunction;
  //   convert_s: { i32: AnyFunction; i64: AnyFunction };
  //   convert_u: { i32: AnyFunction; i64: AnyFunction };
  //   demote: AnyFunction;
  //   add: AnyFunction;
  //   sub: AnyFunction;
  //   mul: AnyFunction;
  //   div: AnyFunction;
  //   copysign: AnyFunction;
  //   min: AnyFunction;
  //   max: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt: AnyFunction;
  //   le: AnyFunction;
  //   gt: AnyFunction;
  //   ge: AnyFunction;
  //   pop: AnyFunction
  // };
  // f64: {
  //   load: AnyFunction;
  //   store: AnyFunction;
  //   const: AnyFunction;
  //   const_bits: AnyFunction;
  //   neg: AnyFunction;
  //   abs: AnyFunction;
  //   ceil: AnyFunction;
  //   floor: AnyFunction;
  //   trunc: AnyFunction;
  //   nearest: AnyFunction;
  //   sqrt: AnyFunction;
  //   reinterpret: AnyFunction;
  //   convert_s: { i32: AnyFunction; i64: AnyFunction };
  //   convert_u: { i32: AnyFunction; i64: AnyFunction };
  //   promote: AnyFunction;
  //   add: AnyFunction;
  //   sub: AnyFunction;
  //   mul: AnyFunction;
  //   div: AnyFunction;
  //   copysign: AnyFunction;
  //   min: AnyFunction;
  //   max: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt: AnyFunction;
  //   le: AnyFunction;
  //   gt: AnyFunction;
  //   ge: AnyFunction;
  //   pop: AnyFunction
  // };
  // v128: {
  //   load: AnyFunction;
  //   load8_splat: AnyFunction;
  //   load16_splat: AnyFunction;
  //   load32_splat: AnyFunction;
  //   load64_splat: AnyFunction;
  //   load8x8_s: AnyFunction;
  //   load8x8_u: AnyFunction;
  //   load16x4_s: AnyFunction;
  //   load16x4_u: AnyFunction;
  //   load32x2_s: AnyFunction;
  //   load32x2_u: AnyFunction;
  //   load32_zero: AnyFunction;
  //   load64_zero: AnyFunction;
  //   load8_lane: AnyFunction;
  //   load16_lane: AnyFunction;
  //   load32_lane: AnyFunction;
  //   load64_lane: AnyFunction;
  //   store8_lane: AnyFunction;
  //   store16_lane: AnyFunction;
  //   store32_lane: AnyFunction;
  //   store64_lane: AnyFunction;
  //   store: AnyFunction;
  //   const: AnyFunction;
  //   not: AnyFunction;
  //   any_true: AnyFunction;
  //   and: AnyFunction;
  //   or: AnyFunction;
  //   xor: AnyFunction;
  //   andnot: AnyFunction;
  //   bitselect: AnyFunction;
  //   pop: AnyFunction
  // };
  // i8x16: {
  //   shuffle: AnyFunction;
  //   swizzle: AnyFunction;
  //   splat: AnyFunction;
  //   extract_lane_s: AnyFunction;
  //   extract_lane_u: AnyFunction;
  //   replace_lane: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt_s: AnyFunction;
  //   lt_u: AnyFunction;
  //   gt_s: AnyFunction;
  //   gt_u: AnyFunction;
  //   le_s: AnyFunction;
  //   le_u: AnyFunction;
  //   ge_s: AnyFunction;
  //   ge_u: AnyFunction;
  //   abs: AnyFunction;
  //   neg: AnyFunction;
  //   all_true: AnyFunction;
  //   bitmask: AnyFunction;
  //   popcnt: AnyFunction;
  //   shl: AnyFunction;
  //   shr_s: AnyFunction;
  //   shr_u: AnyFunction;
  //   add: AnyFunction;
  //   add_saturate_s: AnyFunction;
  //   add_saturate_u: AnyFunction;
  //   sub: AnyFunction;
  //   sub_saturate_s: AnyFunction;
  //   sub_saturate_u: AnyFunction;
  //   min_s: AnyFunction;
  //   min_u: AnyFunction;
  //   max_s: AnyFunction;
  //   max_u: AnyFunction;
  //   avgr_u: AnyFunction;
  //   narrow_i16x8_s: AnyFunction;
  //   narrow_i16x8_u: AnyFunction
  // };
  // i16x8: {
  //   splat: AnyFunction;
  //   extract_lane_s: AnyFunction;
  //   extract_lane_u: AnyFunction;
  //   replace_lane: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt_s: AnyFunction;
  //   lt_u: AnyFunction;
  //   gt_s: AnyFunction;
  //   gt_u: AnyFunction;
  //   le_s: AnyFunction;
  //   le_u: AnyFunction;
  //   ge_s: AnyFunction;
  //   ge_u: AnyFunction;
  //   abs: AnyFunction;
  //   neg: AnyFunction;
  //   all_true: AnyFunction;
  //   bitmask: AnyFunction;
  //   shl: AnyFunction;
  //   shr_s: AnyFunction;
  //   shr_u: AnyFunction;
  //   add: AnyFunction;
  //   add_saturate_s: AnyFunction;
  //   add_saturate_u: AnyFunction;
  //   sub: AnyFunction;
  //   sub_saturate_s: AnyFunction;
  //   sub_saturate_u: AnyFunction;
  //   mul: AnyFunction;
  //   min_s: AnyFunction;
  //   min_u: AnyFunction;
  //   max_s: AnyFunction;
  //   max_u: AnyFunction;
  //   avgr_u: AnyFunction;
  //   q15mulr_sat_s: AnyFunction;
  //   extmul_low_i8x16_s: AnyFunction;
  //   extmul_high_i8x16_s: AnyFunction;
  //   extmul_low_i8x16_u: AnyFunction;
  //   extmul_high_i8x16_u: AnyFunction;
  //   extadd_pairwise_i8x16_s: AnyFunction;
  //   extadd_pairwise_i8x16_u: AnyFunction;
  //   narrow_i32x4_s: AnyFunction;
  //   narrow_i32x4_u: AnyFunction;
  //   extend_low_i8x16_s: AnyFunction;
  //   extend_high_i8x16_s: AnyFunction;
  //   extend_low_i8x16_u: AnyFunction;
  //   extend_high_i8x16_u: AnyFunction
  // };
  // i32x4: {
  //   splat: AnyFunction;
  //   extract_lane: AnyFunction;
  //   replace_lane: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt_s: AnyFunction;
  //   lt_u: AnyFunction;
  //   gt_s: AnyFunction;
  //   gt_u: AnyFunction;
  //   le_s: AnyFunction;
  //   le_u: AnyFunction;
  //   ge_s: AnyFunction;
  //   ge_u: AnyFunction;
  //   abs: AnyFunction;
  //   neg: AnyFunction;
  //   all_true: AnyFunction;
  //   bitmask: AnyFunction;
  //   shl: AnyFunction;
  //   shr_s: AnyFunction;
  //   shr_u: AnyFunction;
  //   add: AnyFunction;
  //   sub: AnyFunction;
  //   mul: AnyFunction;
  //   min_s: AnyFunction;
  //   min_u: AnyFunction;
  //   max_s: AnyFunction;
  //   max_u: AnyFunction;
  //   dot_i16x8_s: AnyFunction;
  //   extmul_low_i16x8_s: AnyFunction;
  //   extmul_high_i16x8_s: AnyFunction;
  //   extmul_low_i16x8_u: AnyFunction;
  //   extmul_high_i16x8_u: AnyFunction;
  //   extadd_pairwise_i16x8_s: AnyFunction;
  //   extadd_pairwise_i16x8_u: AnyFunction;
  //   trunc_sat_f32x4_s: AnyFunction;
  //   trunc_sat_f32x4_u: AnyFunction;
  //   extend_low_i16x8_s: AnyFunction;
  //   extend_high_i16x8_s: AnyFunction;
  //   extend_low_i16x8_u: AnyFunction;
  //   extend_high_i16x8_u: AnyFunction;
  //   trunc_sat_f64x2_s_zero: AnyFunction;
  //   trunc_sat_f64x2_u_zero: AnyFunction
  // };
  // i64x2: {
  //   splat: AnyFunction;
  //   extract_lane: AnyFunction;
  //   replace_lane: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt_s: AnyFunction;
  //   gt_s: AnyFunction;
  //   le_s: AnyFunction;
  //   ge_s: AnyFunction;
  //   abs: AnyFunction;
  //   neg: AnyFunction;
  //   all_true: AnyFunction;
  //   bitmask: AnyFunction;
  //   shl: AnyFunction;
  //   shr_s: AnyFunction;
  //   shr_u: AnyFunction;
  //   add: AnyFunction;
  //   sub: AnyFunction;
  //   mul: AnyFunction;
  //   extmul_low_i32x4_s: AnyFunction;
  //   extmul_high_i32x4_s: AnyFunction;
  //   extmul_low_i32x4_u: AnyFunction;
  //   extmul_high_i32x4_u: AnyFunction;
  //   extend_low_i32x4_s: AnyFunction;
  //   extend_high_i32x4_s: AnyFunction;
  //   extend_low_i32x4_u: AnyFunction;
  //   extend_high_i32x4_u: AnyFunction
  // };
  // f32x4: {
  //   splat: AnyFunction;
  //   extract_lane: AnyFunction;
  //   replace_lane: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt: AnyFunction;
  //   gt: AnyFunction;
  //   le: AnyFunction;
  //   ge: AnyFunction;
  //   abs: AnyFunction;
  //   neg: AnyFunction;
  //   sqrt: AnyFunction;
  //   add: AnyFunction;
  //   sub: AnyFunction;
  //   mul: AnyFunction;
  //   div: AnyFunction;
  //   min: AnyFunction;
  //   max: AnyFunction;
  //   pmin: AnyFunction;
  //   pmax: AnyFunction;
  //   ceil: AnyFunction;
  //   floor: AnyFunction;
  //   trunc: AnyFunction;
  //   nearest: AnyFunction;
  //   convert_i32x4_s: AnyFunction;
  //   convert_i32x4_u: AnyFunction;
  //   demote_f64x2_zero: AnyFunction
  // };
  // f64x2: {
  //   splat: AnyFunction;
  //   extract_lane: AnyFunction;
  //   replace_lane: AnyFunction;
  //   eq: AnyFunction;
  //   ne: AnyFunction;
  //   lt: AnyFunction;
  //   gt: AnyFunction;
  //   le: AnyFunction;
  //   ge: AnyFunction;
  //   abs: AnyFunction;
  //   neg: AnyFunction;
  //   sqrt: AnyFunction;
  //   add: AnyFunction;
  //   sub: AnyFunction;
  //   mul: AnyFunction;
  //   div: AnyFunction;
  //   min: AnyFunction;
  //   max: AnyFunction;
  //   pmin: AnyFunction;
  //   pmax: AnyFunction;
  //   ceil: AnyFunction;
  //   floor: AnyFunction;
  //   trunc: AnyFunction;
  //   nearest: AnyFunction;
  //   convert_low_i32x4_s: AnyFunction;
  //   convert_low_i32x4_u: AnyFunction;
  //   promote_low_f32x4: AnyFunction
  // };
  // funcref: { pop: AnyFunction };
  // externref: { pop: AnyFunction };
  // anyref: { pop: AnyFunction };
  // eqref: { pop: AnyFunction };
  // i31ref: { pop: AnyFunction };
  // dataref: { pop: AnyFunction };
  // stringref: { pop: AnyFunction };
  // stringview_wtf8: { pop: AnyFunction };
  // stringview_wtf16: { pop: AnyFunction };
  // stringview_iter: { pop: AnyFunction };
  // ref: {
  //   null: AnyFunction;
  //   is_null: AnyFunction;
  //   is_func: AnyFunction;
  //   is_data: AnyFunction;
  //   is_i31: AnyFunction;
  //   as_non_null: AnyFunction;
  //   as_func: AnyFunction;
  //   as_data: AnyFunction;
  //   as_i31: AnyFunction;
  //   func: AnyFunction;
  //   eq: AnyFunction
  // };
  // select: AnyFunction;
  // drop: AnyFunction;
  // return: AnyFunction;
  // nop: AnyFunction;
  // unreachable: AnyFunction;
  // atomic: { fence: AnyFunction };
  // try: AnyFunction;
  // throw: AnyFunction;
  // rethrow: AnyFunction;
  // tuple: { make: AnyFunction; extract: AnyFunction };
  // i31: { new: AnyFunction; get_s: AnyFunction; get_u: AnyFunction };
  // addFunction: AnyFunction;
  // getFunction: AnyFunction;
  // removeFunction: AnyFunction;
  // addGlobal: AnyFunction;
  // getGlobal: AnyFunction;
  // addTable: AnyFunction;
  // getTable: AnyFunction;
  // addActiveElementSegment: AnyFunction;
  // addPassiveElementSegment: AnyFunction;
  // getElementSegment: AnyFunction;
  // getTableSegments: AnyFunction;
  // removeGlobal: AnyFunction;
  // removeTable: AnyFunction;
  // removeElementSegment: AnyFunction;
  // addTag: AnyFunction;
  // getTag: AnyFunction;
  // removeTag: AnyFunction;
  // addFunctionImport: AnyFunction;
  // addTableImport: AnyFunction;
  // addMemoryImport: AnyFunction;
  // addGlobalImport: AnyFunction;
  // addTagImport: AnyFunction;
  // addFunctionExport: AnyFunction;
  // addExport: AnyFunction;
  // addTableExport: AnyFunction;
  // addMemoryExport: AnyFunction;
  // addGlobalExport: AnyFunction;
  // addTagExport: AnyFunction;
  // removeExport: AnyFunction;
  // setMemory: AnyFunction;
  // hasMemory: AnyFunction;
  // getMemoryInfo: AnyFunction;
  // getNumMemorySegments: AnyFunction;
  // getMemorySegmentInfoByIndex: AnyFunction;
  // setStart: AnyFunction;
  // getFeatures: AnyFunction;
  // setFeatures: AnyFunction;
  // addCustomSection: AnyFunction;
  // getExport: AnyFunction;
  // getNumExports: AnyFunction;
  // getExportByIndex: AnyFunction;
  // getNumFunctions: AnyFunction;
  // getFunctionByIndex: AnyFunction;
  // getNumGlobals: AnyFunction;
  // getNumTables: AnyFunction;
  // getNumElementSegments: AnyFunction;
  // getGlobalByIndex: AnyFunction;
  // getTableByIndex: AnyFunction;
  // getElementSegmentByIndex: AnyFunction;
  // emitText: AnyFunction;
  // emitStackIR: AnyFunction;
  // emitAsmjs: AnyFunction;
  // validate: AnyFunction;
  // optimize: AnyFunction;
  // optimizeFunction: AnyFunction;
  // runPasses: AnyFunction;
  // runPassesOnFunction: AnyFunction;
  // autoDrop: AnyFunction;
  // dispose: AnyFunction;
  // emitBinary: AnyFunction;
  // interpret: AnyFunction;
  // addDebugInfoFileName: AnyFunction;
  // getDebugInfoFileName: AnyFunction;
  // setDebugLocation: AnyFunction;
  // copyExpression: AnyFunction
}
// export default Module
